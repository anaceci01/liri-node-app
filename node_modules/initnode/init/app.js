/*********************************************************************************
 * InitNode 1.0 nodejs框架 
 * 文件说明：Application 应用运行类，主要是调用和执行应用中的JS函数
 *-------------------------------------------------------------------------------
 * 版权所有: CopyRight By initphp.com
 * 您可以自由使用该源码，但是在使用过程中，请保留作者信息。尊重他人劳动成果就是尊重自己
 *-------------------------------------------------------------------------------
 * $Author:zhuli
 * $Dtime:2012-9-9
***********************************************************************************/
 var app = function () {
	
 	var libPath = require('path');
		
	/*	
	 *	初始化，并运行Controller
	 */
 	this.init = function (initnode) {
 		var filePath = getFilePath(initnode); //获取文件路劲
 		var exists = libPath.existsSync(filePath);
		run(initnode, exists);
 	};

	/*	
	 *	运行项目
	 */
 	var run = function (initnode, exists) {
 		var is_module 		= initnode.config.app.is_module;
 		var basePath  		= initnode.config.base.path;
 		var controllerPath 	= initnode.config.app.controller_path;
 		var file 	  		= initnode.route.box.c;
		
		//正常Action
		if (is_module == true) {
			var file = initnode.route.box.m + '/' + initnode.route.box.c;
		} else {
			var file = initnode.route.box.c;
		}
		file = basePath + controllerPath + file;
		var action = initnode.route.box.a;
		
	
		//默认
		if (is_module == true) {
			var default_file = initnode.config.app.default_module + '/' + initnode.config.app.default_controller;
		} else {
			var default_file = initnode.config.app.default_controller;
		}
		default_file = basePath + controllerPath + default_file;
		var default_action = initnode.config.app.default_action;
		
		if (exists == false) { //文件存在，走正式的Controller,不存在，跳转到默认
			file = default_file;
			action = default_action;
		}
		
		//Action操作
		var objFile = require(file);
		var obj = new objFile;
		action = action + 'Action';
		//如果Action函数不存在，则走默认
		if (obj[action]) {
			runBeforeAction(initnode, obj); //前置
			obj[action](initnode); //Action
			runAfterAction(initnode, obj); //后置
		} else { 
			var defaultObjFile = require(default_file);
			var defaultObj = new defaultObjFile;
			default_action = default_action + 'Action';
			if (defaultObj[default_action]) {
				runBeforeAction(initnode, defaultObj); //前置
				defaultObj[default_action](initnode); //Action
				runAfterAction(initnode, defaultObj); //后置
			} else {
				throw new Error('can not find default action');
			}
		}
		
		//模板输出
		initnode.template.display(initnode);
		return obj;
 	};
	
	/*	
	 *	运行前置Action
	 */
	var runBeforeAction = function (initnode, obj) {
		if (obj['beforeAction']) {
			obj['beforeAction'](initnode);
		}
		return true;
	};
	
	/*	
	 *	运行后置Action
	 */
	var runAfterAction = function (initnode, obj) {
		if (obj['afterAction']) {
			obj['afterAction'](initnode);
		}
		return true;
	};
	
 	/*	
	 *	获取路由到的JS文件的路劲
	 *	如果开启is_module module相当于controller/下的一个文件夹
	 */
 	var getFilePath = function (initnode) {
 		var is_module 		= initnode.config.app.is_module;
 		var basePath  		= initnode.config.base.path;
 		var controllerPath 	= initnode.config.app.controller_path;
 		var file 	  		= initnode.route.box.c;
 		if (is_module == false) {
 			return basePath + controllerPath + file + '.js';
 		} else {
 			var m = initnode.route.box.m;
 			return basePath + controllerPath  + m + '/' + file + '.js';
 		}
 	};

 }

 module.exports = app;