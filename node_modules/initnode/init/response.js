/*********************************************************************************
 * InitNode 1.0 nodejs框架 
 * 文件说明：Response HTTP响应类，输出数据都需要经过该类
 *-------------------------------------------------------------------------------
 * 版权所有: CopyRight By initphp.com
 * 您可以自由使用该源码，但是在使用过程中，请保留作者信息。尊重他人劳动成果就是尊重自己
 *-------------------------------------------------------------------------------
 * $Author:zhuli
 * $Dtime:2012-9-9
***********************************************************************************/
var response = function () {
	
	var res = null;
	var cookieArr = []; //存放cookie输出数据
	
	/*	
	 *	初始化，获取res对象
	 */
	this.init = function (initnode) {
		res = initnode.res;
		cookieArr = [];
	};
	
	/*	
	 *	写入头部
	 *	使用：initnode.response.writeHead(code, msg, opt);
	 *	type值为0 则在静态服务器中使用，其它可以忽略这个参数
	 */
	this.writeHead = function (code, msg, opt, type) {
		if (type != 0) {
			this.flush_cookie();
		}
		res.writeHead(code, msg, opt);
		return;
	};
	
	/*	
	 *	设置头部属性
	 *	使用：initnode.response.setHeader(name, value);
	 */
	this.setHeader = function (name, value) {
		return res.setHeader(name, value);
	};
	
	/*	
	 *	获取头部属性
	 *	使用：initnode.response.getHeader(name);
	 */
	this.getHeader = function (name) {
		return res.getHeader(name);
	};
		
	/*	
	 *	删除头部属性
	 *	使用：initnode.response.removeHeader(name);
	 */
	this.removeHeader = function (name) {
		return res.removeHeader(name);
	};
	
	/*	
	 *	写入头部
	 *	使用：initnode.response.write(data, encoding);
	 */
	this.write = function (data, encoding) {
		return res.write(data, encoding);
	};
	
	/*	
	 *	结束
	 *	使用：initnode.response.end(code, msg, opt);
	 */
	this.end = function (data, encoding) {
		return res.end(data, encoding);
	};
	
	/*	
	 *	返回消息结构
	 *	使用：initnode.response.sendMsg();
	 */
	this.sendMsg = function (errorCode, msg, data) {
		var json = {};
		json.error_code = errorCode;
		json.msg = msg;
		json.data = data;
		return this.sendJson(json);
	};
	
	/*	
	 *	发送HTML
	 *	使用：initnode.response.sendHtml(data);
	 */
	this.sendHtml = function (data) {
		this.writeHead(200, "Ok", {'Content-Type': "text/html"});
		this.end(data);
		return;
	};
	
	/*	
	 *	输出Json数据
	 *	使用：initnode.response.sendJson();
	 */
	this.sendJson = function (data) {
		this.writeHead(200, "Ok", {'Content-Type': "text/html"});
		this.end(JSON.stringify(data));
		return;
	};
	
	/*	
	 *	返回304 HTTP状态
	 *	使用：initnode.response.send304();
	 */
	this.send304 = function () {
		this.writeHead(304, "Not Modified", {}, 0);
		this.end();
		return;
	};
	
	/*	
	 *	返回404 HTTP状态
	 *	使用：initnode.response.send404();
	 */
	this.send404 = function () {
		this.writeHead(404, "Can not find", {}, 0);
		this.end();
		return;
	};
	
	/*	
	 *	返回500 HTTP状态
	 *	使用：initnode.response.send500();
	 */
	this.send500 = function () {
		this.writeHead(500, 'Server error', {'Content-Type': "text/plain"}, 0);
		this.end();
		return;
	};
	
	/*	
	 *	说明：设置COOKIE
	 * 	使用：
	 *	设置Cookie initnode.request.set_cookie('username', 'initnode', 30, '/');
	 *	name 	cookie名称
	 *	value	cookie值
	 *	expires 有效期时间，秒计算
	 *	path	有效目录
	 *	domain	域名
	 */
	this.set_cookie = function (name, value, expires, path, domain) {
		var cookieSrt = '';
		cookieStr = name + '=' + value + ';';
		//cookie有效期时间
		if (expires != undefined) {
			expires = parseInt(expires);
			var today = new Date();
			var time = today.getTime() + expires * 1000;
			var new_date = new Date(time);
			var expiresDate = new_date.toGMTString(); //转换成 GMT 格式。
			cookieStr += 'expires=' +  expiresDate + ';';
		}
		//目录
		if (path != undefined) {
			cookieStr += 'path=' +  path + ';';	
		}
		//域名
		if (domain != undefined) {
			cookieStr += 'domain=' +  domain + ';';	
		}
		cookieArr.push(cookieStr);
		return true;
	};
	
	/*	
	 *	说明：设置COOKIE
	 * 	使用：
	 *	设置Cookie initnode.request.set_cookie('username', 'initnode', 30, '/');
	 *	name 	cookie名称
	 *	value	cookie值
	 *	expires 有效期时间，秒计算
	 *	path	有效目录
	 *	domain	域名
	 */
	this.del_cookie = function (name) {
		this.set_cookie(name, '', -999);
		return true;
	};
	
	/*	
	 *	说明：header头部发送cookie设置信息
	 *	该函数已经在this.writeHead 默认设置，用户不需要关心
	 * 	使用：
	 *	设置Cookie initnode.response.flush_cookie();
	 */
	this.flush_cookie = function () {
		res.setHeader("Set-Cookie", cookieArr);	
	};
	
}

module.exports = response;  