/*********************************************************************************
 * InitNode 1.0 nodejs框架 
 * 文件说明：安全过滤类，主要过滤GET POST COOKIE参数，XSS，CSRF，安全路径过滤等
 *-------------------------------------------------------------------------------
 * 版权所有: CopyRight By initphp.com
 * 您可以自由使用该源码，但是在使用过程中，请保留作者信息。尊重他人劳动成果就是尊重自己
 *-------------------------------------------------------------------------------
 * $Author:zhuli
 * $Dtime:2012-9-9
***********************************************************************************/
var filter = function () {
	
	this.response = null; //csrf 需要用到response 和 request对象 获取和生成cookie
	this.request  = null;
	
	/*	
	 *	说明：过滤 ' " \ 都加上反斜杠处理
	 * 	使用：
	 *	initnode.filter.addslashes(val);
	 *	参数：
	 *	也可以传入对象，{'username':'asdasd', 'age' : 'asdasd'}
	 *	可以传入单个参数, 'asdasdasd'
	 */
	this.addslashes = function (data) {
		if (typeof(data) == 'object') {
			for (val in data) {
				data[val] = _addslashes(data[val]);
			}
		} else {
			data = _addslashes(data);
		}
		return data;
	};
	
	/*	
	 *	私有函数 处理过滤
	 */
	var _addslashes = function (val) {
		val = val.toString();
		val = val.replace(/\\/g, '\\\\');
		val = val.replace(/'/g, "\\'");
		val = val.replace(/"/g, "\\\"");
		return val;
	};
	
	/*	
	 *	说明：过滤XSS
	 *	模板中使用<!--{}-->标签输出变量则自动添加XSS过滤
	 *	使用<!--@@-->标签则不进行xss过滤
	 * 	使用：
	 *	initnode.filter.xss(val);
	 */
	this.xss = function (val) {
		val = val.toString();
		val = val.replace(/[<%3C]/g, "&lt;");
		val = val.replace(/[>%3E]/g, "&gt;");
		val = val.replace(/"/g, "&quot;");
		val = val.replace(/'/g, "&#39;");
		return val;
	};
	
	/*	
	 *	说明：安全路径，文件夹路径相关都走这个函数进行过滤
	 * 	使用：
	 *	initnode.filter.safe_path(val);
	 */
	this.safe_path = function (val) {
		val = val.toString();
		return val.replace(/\.\./g, "");	
	};
	
	/*	
	 *	说明：Csrf 设置cookie
	 *	已经在core.init函数中初始化，使用者不需要关心此函数
	 *	此函数主要用于用户飞一次访问生成一个随机cookie值，作为
	 *	用户标识，防止恶意黑客CSRF跨站攻击。只有浏览器重启后，cookie值才会变化。
	 * 	使用：
	 *	initnode.filter.set_csrf
	 */
	this.set_csrf = function () {
		if (!this.request.get_cookie('initnode_token')) {
			var val = parseInt(10000000*Math.random());
			this.response.set_cookie('initnode_token', val);
			this.request.set_default_cookie('initnode_token', val);
		}
	};
	
	/*	
	 *	说明：获取csrf 随机码
	 *	可以通过这个函数得到随机的token值，用户需要在
	 *	GET或者POST操作的请求中，带上initnode_token参数，
	 *	然后通过check_csrf验证，如果验证不通过，则表示跨站
	 * 	使用：
	 *	initnode.filter.get_csrf()
	 */
	this.get_csrf = function () {
		return this.request.get_cookie('initnode_token');
	};
	
	/*	
	 *	说明：验证Csrf
	 * 	使用：
	 *	initnode.filter.check_csrf()
	 */
	this.check_csrf = function () {
		var cookieVal = this.request.get_cookie('initnode_token');
		var getVal = this.request.get('initnode_token');
		var postVal = this.request.get('initnode_token');
		var val = (postVal == '') ? getVal : postVal;
		if (cookieVal != postVal) {
			return false;	
		}
		return true;
	};
}

module.exports = filter;
