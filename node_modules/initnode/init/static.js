/*********************************************************************************
 * InitNode 1.0 nodejs框架 
 * 文件说明：静态资源服务器
 *-------------------------------------------------------------------------------
 * 版权所有: CopyRight By initphp.com
 * 您可以自由使用该源码，但是在使用过程中，请保留作者信息。尊重他人劳动成果就是尊重自己
 *-------------------------------------------------------------------------------
 * $Author:zhuli
 * $Dtime:2012-9-9
***********************************************************************************/
var static = function () {
	
	var url 	= require("url");
	var libPath = require('path');
	var fs	 	= require('fs');
	var zlib 	= require("zlib");
	var mime = {
		"css": "text/css",
		"gif": "image/gif",
		"html": "text/html",
		"ico": "image/x-icon",
		"jpeg": "image/jpeg",
		"jpg": "image/jpeg",
		"js": "text/javascript",
		"json": "application/json",
		"pdf": "application/pdf",
		"png": "image/png",
		"svg": "image/svg+xml",
		"swf": "application/x-shockwave-flash",
		"tiff": "image/tiff",
		"txt": "text/plain",
		"wav": "audio/x-wav",
		"wma": "audio/x-ms-wma",
		"wmv": "video/x-ms-wmv",
		"xml": "text/xml"
	};
	
	/*	
	 *	静态资源访问
	 */
	this.init = function (initnode) {
		var path 		= initnode.route.box.static;
		var basePath  	= initnode.config.base.path;
		var static_path = basePath + initnode.config.static.path + path;
		
		var exts = libPath.extname(static_path); //文件后缀名
		ext = exts ? exts.slice(1) : 'html';

		var contentType = mime[ext] || "text/plain"; //发送类型
		var isStaticFileExist = libPath.existsSync(static_path); //判断文件是否存在
		if (isStaticFileExist && exts) {
			
			//如果是gif|png|jpg|js|css 做HTTP缓存设置
			if (ext.match(/^(gif|png|jpg|js|css)$/ig)) {
				lastModified = cache(initnode, static_path); //设置缓存
				var if_modified_since = initnode.req.headers['if-modified-since'];
				if (if_modified_since && if_modified_since == lastModified) {
					initnode.response.send304(); //304 HTTP
					return;
				}
			}

			//如果是css js html 通过流的方式读取
			if (ext.match(/css|js|html/ig)) {
				zlibs(initnode, static_path, ext); //设置缓存
				return;
			} else {
				var raw = fs.createReadStream(static_path);
				initnode.response.writeHead(200, "Ok", {'Content-Type': contentType}, 0);
				raw.pipe(initnode.res);
				return;
			}
		} else {
			initnode.response.send500(); //500错误
		}
	};
	
	/*	
	 *	图片等静态资源作浏览器缓存
	 */
	var cache = function (initnode, static_path) {
		//静态资源做缓存
		var thisData = new Date();
		var maxAge = thisData.getTime() + 60 * 60 * 24 * 30 * 1000;
		initnode.response.setHeader("Expires", thisData.toUTCString()); 	
		initnode.response.setHeader("Cache-Control", "max-age=" + maxAge);
		stat = fs.statSync(static_path);
		var lastModified = stat.mtime.toUTCString();
		initnode.response.setHeader("Last-Modified", lastModified);
		return lastModified;
	};
	
	/*	
	 *	css js html 等静态资源作zlib压缩
	 */
	var zlibs = function (initnode, static_path) {
		var raw = fs.createReadStream(static_path);
		var acceptEncoding = initnode.req.headers['accept-encoding'] || "";
		if (acceptEncoding.match(/\bgzip\b/)) {
			initnode.response.writeHead(200, "Ok", {'Content-Encoding': 'gzip'}, 0);
			raw.pipe(zlib.createGzip()).pipe(initnode.res);
		} else if (acceptEncoding.match(/\bdeflate\b/)) {
			initnode.response.writeHead(200, "Ok", {'Content-Encoding': 'deflate'}, 0);
			raw.pipe(zlib.createDeflate()).pipe(initnode.res);
		} else {
    		initnode.response.writeHead(200, "Ok", {}, 0);
    		raw.pipe(initnode.res);
		}
	};
}

module.exports = static;  