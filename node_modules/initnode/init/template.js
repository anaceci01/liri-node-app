/*********************************************************************************
 * InitNode 1.0 nodejs框架 
 * 文件说明：Template 模板类
 *-------------------------------------------------------------------------------
 * 版权所有: CopyRight By initphp.com
 * 您可以自由使用该源码，但是在使用过程中，请保留作者信息。尊重他人劳动成果就是尊重自己
 *-------------------------------------------------------------------------------
 * $Author:zhuli
 * $Dtime:2012-9-9
***********************************************************************************/
var template = function () {
	
	var view 	= {};	//模板输出对象数据
	var tpl  	= []; 	//模板变量
	var fs	 	= require('fs');
	var libPath = require('path');
	

	/*	
	 *	初始化
	 */
	this.init = function () {
		view = {};
		tpl  = [];
	};
	
	/*	
	 *	模板变量赋值
	 *	使用：initnode.template.set_tpl('username', 'zhuli')
	 *	则模板标签中 <!--{view.username}--> 就可以输出
	 */
	this.assign = function (name, value) {
		if (!view[name]) {
			view[name] = value;
		}
		return true;
	};

	/*	
	 *	模板变量赋值
	 *	使用：initnode.template.set_tpl('test/test');
	 *	默认会有配置template_path参数
	 *	initnode.template.set_tpl('test/test'); 相当于template/test/test.htm 模板文件
	 *	initnode.template.set_tpl('test'); 相当于template/test.htm 模板文件
	 */
	this.set_tpl = function (name) {
		tpl.push(name);
		return true;
	};
	
	/*	
	 *	模板输出
	 *	使用：initnode.template.display(initnode); 
	 *	在app.js中我们已经默认输出渲染，用户不必关心
	 *	initnode.template.display(initnode); 
	 */
	this.display = function (initnode) {
		var len = tpl.length;
		if (len  > 0) {
			initnode.response.writeHead(200, {"Content-Type": "text/html"});
			for (var i=0; i < len ; i++) {
				initnode.response.write(compile(tpl[i], initnode));
			}
			initnode.response.end();
		}
	};
	
	/*	
	 *	在模板中使用该方法可以实现模板布局
	 *	该参数在模板页面中使用
	 *	使用：
	 *	<!--{initnode.template.get_tpl('test/test2', initnode)}-->
	 */
	this.get_tpl = function (file, initnode) {		
		var tpl_data = compile(file, initnode);
		return tpl_data;
	};

	/*	
	 *	模板编译函数，可以自行判断是否已经编译过
	 */
	var compile = function (file, initnode) {
		var base_path = initnode.config.base.path;
		var template_path = initnode.config.template.template_path;
		var template_postfix = initnode.config.template.template_postfix;
		var compile_path = initnode.config.template.compile_path;
		
		var template_file = base_path +  template_path + file + template_postfix;
		var compile_file  = base_path +  compile_path + file + '.js';
		var require_path  = base_path +  compile_path + file;
		
		var isCompileFileExist = libPath.existsSync(compile_file); //判断是否已经编译过
		if (initnode.config.base.de_bug == true) { //如果调试状态，模板每次新生成
			isCompileFileExist = false; 
		}
		if (isCompileFileExist == true) {
			var template = require(require_path);
			return template.run(view, initnode);	//执行run函数
		} else {
			var data = fs.readFileSync(template_file, 'utf-8');
			data = data.toString();
			var compile_data = compile_rule(data);
			
			//判断变异目录是否存在，不存在则创建
			var compilePath   = libPath.dirname(compile_file);
			var isCompilePath = libPath.existsSync(compilePath);
			if (isCompilePath == false) {
				fs.mkdirSync(compilePath, 0777);
			}
			fs.writeFileSync(compile_file, compile_data);
			var template = require(require_path);
			return template.run(view, initnode);	
		}
	};
	
	/*	
	 *	编译规则 将html文件编译成.js文件
	 *	规则：
	 *	输出变量（XSS过滤）：<!--{view.username}-->
	 *	输出变量：<!--@view.username@-->
	 *	JS代码块：<!--#if (xxx) {#-->
	 */
	var compile_rule = function (data) {
		data = data.replace(/"/g, "\\\"");
		data = data.replace(/<!--{/g, "\"+initnode.filter.xss(");
		data = data.replace(/}-->/g, ")+\"");
		data = data.replace(/<!--@/g, "\"+");
		data = data.replace(/@-->/g, "+\"");
		data = data.replace(/#-->\r\n/g, "#-->");
		data = data.replace(/\r\n/g, "\\r\\n");
		data = data.replace(/<!--#/g, "\";");
		data = data.replace(/#-->/g, "tpl+=\"");
		var str = "exports.run = function (view, initnode) { var tpl = \"" + data + "\";\r\n\r\nreturn tpl; \r\n};";
		return str;
	};
}

module.exports = template;  